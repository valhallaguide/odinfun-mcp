/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokensController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/community-comments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getCommunityComments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/comment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TokenController_postComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getOwners"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/liquidity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getLiquidity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getTrades"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/tv_feed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getTradingViewFeed"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_getImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/favorite": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TokenController_addToFavorites"];
        delete: operations["TokenController_removeFromFavorites"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/twitter/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TokenController_verifyTwitterHandle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{token}/comment/{comment}/pin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TokenController_pinComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{token}/comment/{comment}/unpin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TokenController_unpinComment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{tokenId}/comment/{id}/{action}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["TokenController_upvote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{tokenId}/comment/{id}/upvote": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete: operations["TokenController_removeUpvote"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags */
        get: operations["TagsController_findAll"];
        put?: never;
        /** Create a new tag */
        post: operations["TagsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/tags/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a tag by ID */
        get: operations["TagsController_findOne"];
        put?: never;
        post?: never;
        /** Delete a tag */
        delete: operations["TagsController_remove"];
        options?: never;
        head?: never;
        /** Update a tag */
        patch: operations["TagsController_update"];
        trace?: never;
    };
    "/v1/token/{id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all tags for a token */
        get: operations["TokenTagsController_getTokenTags"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/token/{id}/tag/{tagId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a tag to a token */
        post: operations["TokenTagsController_addTagToToken"];
        /** Remove a tag from a token */
        delete: operations["TokenTagsController_removeTagFromToken"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/trades": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TradesController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/trade/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TradeController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/btc/balance/{address}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BTCController_getBtcBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UsersController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/tokens": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getOwned"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/liquidity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getOwnedLiquidity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/created": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getTokens"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/balances": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getBalances"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_upsertProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/username": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_updateUsername"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_upsertImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{btcaddress}/utxo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getUtxo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/runes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_hiroGet"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/pending/deposit": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_deposit"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/pending/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_withdraw"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_activity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/achievements": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getAchievements"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/achievement/{achievementId}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_claimAchievements"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/token/favorites": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getTokenFavorites"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/referral_earnings_stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getReferralEarnings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/referral_earnings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getReferralEarningsHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/token/{token}/realized_pnl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getUserRealizedPnl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/token/{token}/unrealized_pnl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getUserUnrealizedPnl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/user/{principal}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UserController_getUserTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SettingsController_getSettings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TransactionsController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/transaction/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["TransactionController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/balance/{token}/{principal}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["BalanceController_getPrincipalTokenBalance"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AuthController_checkAuth"];
        put?: never;
        post: operations["AuthController_authenticate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_refreshAuth"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/upload/{filename}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["UploadController_getFile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/upload": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UploadController_upload"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/currency/{symbol}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["CurrencyController_getCurrency"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/blife/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["BlifeController_sync"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/stripe/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["StripeController_createSession"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snapshot/token/{id}/share": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SnapshotController_createTokenShareSnapshot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snapshot/token/{id}/pnl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SnapshotController_createTokenPnlSnapshot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snapshot/{id}/save": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["SnapshotController_saveSnapshot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/snapshot/{id}/image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SnapshotController_getImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/activity/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ActivityController_findOne"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/activities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["ActivitiesController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SearchController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/statistics/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["StatisticsController_getDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/rune/{rune_name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["RunesController_getByRuneName"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Paginated: {
            data: string[];
            count: number;
            page: number;
            limit: number;
        };
        LedgerEntity: {
            user: string;
            token: string;
            /** Format: decimal */
            balance: number;
            user_username: string;
            user_image: string;
        };
        TagEntity: {
            id: number;
            name: string;
            description?: string;
            created_time: string;
        };
        Function: Record<string, never>;
        TokenEntity: {
            id: string;
            name: string;
            description?: string;
            image?: string;
            creator?: string;
            created_time: string;
            volume: number;
            bonded: boolean;
            icrc_ledger?: string;
            price: number;
            marketcap: number;
            rune?: string;
            featured: boolean;
            holder_count: number;
            comment_count: number;
            sold: number;
            twitter?: string;
            website?: string;
            telegram?: string;
            last_comment_time?: string;
            rel_ledgers: components["schemas"]["LedgerEntity"][];
            buy_count: number;
            sell_count: number;
            ticker: string;
            /** Format: int64 */
            btc_liquidity: number;
            /** Format: int64 */
            user_btc_liquidity: number;
            /** Format: decimal */
            user_token_liquidity: number;
            /** Format: decimal */
            user_lp_tokens: number;
            /** Format: decimal */
            token_liquidity: number;
            /** Format: decimal */
            total_supply: number;
            /** Format: int64 */
            swap_fees: number;
            /** Format: int64 */
            swap_volume: number;
            /** Format: int64 */
            swap_fees_24: number;
            /** Format: decimal */
            threshold: number;
            /** Format: int64 */
            swap_volume_24: number;
            /** Format: int64 */
            holder_dev: number;
            /** Format: int64 */
            holder_top: number;
            /** Format: int64 */
            txn_count: number;
            decimals: number;
            deposits: boolean;
            divisibility: number;
            external: boolean;
            trading: boolean;
            withdrawals: boolean;
            /** Format: date-time */
            last_action_time: string;
            /** Format: int64 */
            price_5m: number;
            /** Format: int64 */
            price_1h: number;
            /** Format: int64 */
            price_6h: number;
            /** Format: int64 */
            price_1d: number;
            rune_id: string;
            twitter_verified: boolean;
            rel_tags: components["schemas"]["TagEntity"][];
            tags: components["schemas"]["Function"];
            verified: boolean;
        };
        CommentVoteEntity: {
            /** Format: decimal */
            upvotes: number;
            /** Format: decimal */
            downvotes: number;
            total: number;
        };
        CommentEntity: {
            /** Format: int64 */
            id: number;
            user: string;
            token: string;
            /** Format: date-time */
            time: string;
            message: string;
            /** @default false */
            reported: boolean;
            /** @default false */
            blocked: boolean;
            image?: string;
            pinned: boolean;
            /** Format: date-time */
            pinned_time: string;
            /**
             * @description If 1, comment is in the community section requiring token ownership
             * @default 0
             */
            community: number;
            user_username?: string;
            user_image?: string;
            vote: components["schemas"]["CommentVoteEntity"];
            user_upvote: boolean;
        };
        CreateTokenCommentBodyDto: {
            message: string;
            /**
             * @description If 1, comment is in the community section requiring token ownership
             * @default 0
             */
            community: number;
        };
        TradeEntity: {
            id: string;
            user: string;
            token: string;
            /** Format: date-time */
            time: string;
            buy: boolean;
            /** Format: int64 */
            amount_btc: number;
            /** Format: decimal */
            amount_token: number;
            /** Format: int64 */
            price: number;
            bonded: boolean;
            user_username: string;
            user_image: string;
            decimals: components["schemas"]["Function"];
            divisibility: components["schemas"]["Function"];
        };
        TokenFeedEntity: {
            /** Format: decimal */
            time: number;
            /** Format: decimal */
            open: number;
            /** Format: decimal */
            high: number;
            /** Format: decimal */
            low: number;
            /** Format: decimal */
            close: number;
            /** Format: decimal */
            volume: number;
        };
        TokenFavoriteEntity: {
            user: string;
            token: string;
            /** Format: date-time */
            date_created: string;
        };
        CommentUpvoteEntity: {
            user: string;
            /** Format: int64 */
            comment: number;
            /** Format: date-time */
            time: string;
            vote: boolean;
        };
        CommentUpvoteEntityResponse: {
            data: components["schemas"]["CommentUpvoteEntity"];
        };
        CreateTagDto: {
            /** @description Tag name */
            name: string;
            /** @description Tag description */
            description?: string;
        };
        UpdateTagDto: {
            /** @description Tag name */
            name?: string;
            /** @description Tag description */
            description?: string;
        };
        OmitTypeClass: {
            user: string;
            token: string;
            time: string;
            message: string;
            /**
             * @description If 1, comment is in the community section requiring token ownership
             * @default 0
             */
            community: number;
        };
        UserEntity: {
            principal: string;
            username: string;
            bio?: string;
            image?: string;
            referrer?: string;
            admin: boolean;
            ref_code: string;
            /** Format: int64 */
            profit: number;
            /** Format: int64 */
            total_asset_value: number;
            referral_count: number;
            /** Format: int64 */
            referral_earnings: number;
            access_allowed: boolean;
            beta_access_codes: string;
            btc_deposit_address: string;
            blife_id: string;
            /** Format: date-time */
            created_at: string;
            btc_wallet_address: string;
            rune_deposit_address: string;
        };
        UpdateUserDto: {
            username?: string;
            bio?: string;
            /** Format: binary */
            image?: string;
            referrer?: string;
            ref_code?: string;
        };
        TokenAndBalanceEntity: {
            token: components["schemas"]["TokenEntity"];
            /** Format: decimal */
            balance: number;
        };
        UserBalanceEntity: {
            id: string;
            ticker: string;
            rune: string;
            name: string;
            image: string;
            divisibility: number;
            decimals: number;
            trading: boolean;
            deposits: boolean;
            withdrawals: boolean;
            rune_id: string;
            /** Format: decimal */
            balance: number;
        };
        UpsertProfileDto: {
            username?: string;
            bio?: string;
        };
        UpdateUsernameDto: {
            username: string;
        };
        UploadProfileImageDto: {
            /** Format: binary */
            image: string;
        };
        NowNodesUtxoEntity: {
            txid: string;
            vout: number;
            value: string;
            height: number;
            confirmations: number;
        };
        PaginatedHiroRune: {
            data: string[];
            total: number;
            page: number;
            limit: number;
        };
        HiroRune: {
            id: string;
            name: string;
            spaced_name: string;
        };
        HiroRuneEntity: {
            rune: components["schemas"]["HiroRune"];
            balance: string;
            address: string;
        };
        /** @enum {number} */
        ActivityAction: never;
        UserActivityTokenEntity: {
            id: string;
            ticker: string;
            rune: string;
            name: string;
            image: string;
            divisibility: number;
            decimals: number;
            trading: boolean;
            deposits: boolean;
            withdrawals: boolean;
            rune_id: string;
        };
        UserActivityEntity: {
            id?: string;
            /** Format: date-time */
            time: string;
            action: components["schemas"]["ActivityAction"];
            /** Format: decimal */
            amount_token: number;
            /** Format: int64 */
            amount_btc: number;
            description: components["schemas"]["Function"];
            token?: components["schemas"]["UserActivityTokenEntity"];
            rel_token?: components["schemas"]["TokenEntity"];
        };
        UserAchievementResponseAchievement: {
            category: number;
            category_order: number;
            default: number;
            description: string;
            image: string;
            name: string;
            /** @example [
             *       0,
             *       1,
             *       3
             *     ] */
            prereq_active: number[] | null;
            /** @example [
             *       0,
             *       1,
             *       3
             *     ] */
            prereq_display: number[] | null;
            id: number;
            status: number;
            status_text: string;
        };
        UserAchievementResponse: {
            category_id: number;
            category_name: string;
            achievements: components["schemas"]["UserAchievementResponseAchievement"][];
        };
        ReferralEarningEntity: {
            /** Format: int64 */
            id: number;
            user: string;
            /** Format: date-time */
            date: string;
            trades: number;
            users: number;
            /** Format: decimal */
            volume: number;
            /** Format: decimal */
            earnings: number;
        };
        Object: Record<string, never>;
        UserRealizedPnlEntity: {
            /** Format: int64 */
            realized_quantity: number;
            /** Format: int64 */
            avg_price_delta: number;
            /** Format: int64 */
            realized_pnl: number;
            display_realized_quantity: number;
            display_avg_price_delta: number;
            display_realized_pnl: number;
            avg_sell_price: number;
            avg_buy_price: number;
        };
        UserUnrealizedPnlEntity: {
            /** Format: int64 */
            unrealized_quantity: number;
            /** Format: int64 */
            avg_buy_price: number;
            /** Format: int64 */
            unrealized_pnl: number;
            display_unrealized_quantity: number;
            display_avg_buy_price: number;
            display_unrealized_pnl: number;
        };
        TransactionEntity: {
            id: string;
            /** Format: decimal */
            amount: number;
            token: string;
            status: number;
            address: string;
            user: string;
            /** Format: date-time */
            index_time: string;
            /** Format: date-time */
            created_time: string;
            /** Format: date-time */
            updated_time: string;
            canister: string;
        };
        SlimTokenEntity: {
            id: string;
            ticker: string;
            rune: string;
            name: string;
            image: string;
            divisibility: number;
            decimals: number;
            trading: boolean;
            deposits: boolean;
            withdrawals: boolean;
            rune_id: string;
        };
        TransactionAndTokenEntity: {
            transaction: components["schemas"]["TransactionEntity"];
            token: components["schemas"]["SlimTokenEntity"];
        };
        SettingEntity: {
            id: number;
            access_required: boolean;
            /** Format: int64 */
            bond_platform_fee: number;
            /** Format: int64 */
            bond_referral_reward: number;
            /** Format: int64 */
            bond_reward: number;
            /** Format: int64 */
            mint_fee: number;
            /** Format: int64 */
            swap_lp_fee: number;
            /** Format: int64 */
            swap_platform_fee: number;
            /** Format: int64 */
            swap_referral_reward: number;
            last_ckbtc_block: number;
            last_indexed_block: number;
            /** Format: int64 */
            community_comments_threshold: number;
            /** Format: int64 */
            public_comments_threshold: number;
        };
        EventEntity: {
            id: string;
            type: string;
            user: string;
            time: string;
            token: string;
            metadata: Record<string, never>;
        };
        AuthenticateDto: {
            publickey?: string;
            delegation?: string;
            timestamp: string;
            signature: string;
            referrer?: string;
        };
        AuthJwtResponse: {
            token: string;
        };
        CurrencyEntity: {
            /** Format: int64 */
            id: number;
            amount: number;
            /** Format: date-time */
            datetime: string;
            symbol: string;
        };
        StripeCreateSessionResponse_TransactionDetails_WalletAddress: {
            avalanche: null | null;
            base_network: null | null;
            bitcoin: string;
            destination_tags: null | null;
            ethereum: null | null;
            polygon: null | null;
            solana: null | null;
            stellar: null | null;
        };
        StripeCreateSessionResponse_TransactionDetails: {
            destination_amount: null | null;
            destination_currencies: string[];
            destination_currency: string;
            destination_network: string;
            destination_networks: string[];
            fees: null | null;
            lock_wallet_address: boolean;
            source_amount: null | null;
            source_currency: null | null;
            transaction_id: null | null;
            wallet_address: null | null;
            wallet_addresses: components["schemas"]["StripeCreateSessionResponse_TransactionDetails_WalletAddress"];
        };
        StripeCreateSessionResponse: {
            id: string;
            object: string;
            client_secret: string;
            created: number;
            kyc_details_provided: boolean;
            livemode: boolean;
            metadata: Record<string, never>;
            redirect_url: string;
            status: string;
            transaction_details: components["schemas"]["StripeCreateSessionResponse_TransactionDetails"];
        };
        CreateTokenShareSnapshotDto: {
            message: string;
            show_balance: boolean;
        };
        LabelValue: {
            label: string;
            value: string;
        };
        CreateSnapshotImageDto: {
            token: string;
            color: string;
            main_value: string;
            values: components["schemas"]["LabelValue"][];
        };
        SnapshotEntity: {
            id: string;
            image: string;
            /** Format: date-time */
            time: string;
            user: string;
            token: string;
            data: components["schemas"]["CreateSnapshotImageDto"];
        };
        SearchEntity: {
            id: string;
            type: string;
            label: string;
        };
        BisRuneTotalSaleInfo: {
            sale_count: number;
            sale_count_3h: number;
            sale_count_6h: number;
            sale_count_9h: number;
            sale_count_12h: number;
            sale_count_1d: number;
            sale_count_3d: number;
            sale_count_7d: number;
            sale_count_30d: number;
            sale_amount: number;
            vol_3h: number;
            vol_6h: number;
            vol_9h: number;
            vol_12h: number;
            vol_1d: number;
            vol_3d: number;
            vol_7d: number;
            vol_30d: number;
            vol_total: number;
        };
        RuneResponseData: {
            rune_id?: string[];
            rune_number?: string;
            rune_name?: string;
            spaced_rune_name?: string;
            symbol?: string;
            decimals?: number;
            per_mint_amount?: string;
            mint_cnt?: string;
            mint_cnt_limit?: string;
            premined_supply?: string;
            total_minted_supply?: string;
            burned_supply?: string;
            circulating_supply?: string;
            mint_progress?: number;
            mint_start_block?: number;
            mint_end_block?: number;
            genesis_block?: number;
            deploy_ts?: string;
            deploy_txid?: string;
            auto_upgrade?: boolean;
            holder_count?: number;
            event_count?: number;
            mintable?: boolean;
            icon_inscr_id?: string;
            icon_delegate_id?: string;
            icon_content_url?: string;
            icon_render_url?: string;
            avg_unit_price_in_sats?: number;
            min_listed_unit_price_in_sats?: number;
            min_listed_unit_price_unisat?: number;
            listed_supply?: string;
            listed_supply_ratio?: number;
            marketcap?: number;
            total_sale_info?: components["schemas"]["BisRuneTotalSaleInfo"];
            token_id: string;
            icon: string[];
            name: string;
        };
        OmnityResponseEntity: {
            decimals: number;
            token_id: string;
            icon: string[];
            name: string;
            rune_id: string[];
            symbol: string;
        };
        BisRuneEntity: {
            rune_id: string;
            rune_number: string;
            rune_name: string;
            spaced_rune_name: string;
            symbol: string;
            decimals: number;
            per_mint_amount: string;
            mint_cnt: string;
            mint_cnt_limit: string;
            premined_supply: string;
            total_minted_supply: string;
            burned_supply: string;
            circulating_supply: string;
            mint_progress: number;
            mint_start_block: number;
            mint_end_block: number;
            genesis_block: number;
            deploy_ts: string;
            deploy_txid: string;
            auto_upgrade: boolean;
            holder_count: number;
            event_count: number;
            mintable: boolean;
            icon_inscr_id: string;
            icon_delegate_id: string;
            icon_content_url: string;
            icon_render_url: string;
            avg_unit_price_in_sats: number;
            min_listed_unit_price_in_sats: number;
            min_listed_unit_price_unisat: number;
            listed_supply: string;
            listed_supply_ratio: number;
            marketcap: number;
            total_sale_info: components["schemas"]["BisRuneTotalSaleInfo"];
        };
        RuneResponseEntity: {
            /** Format: int64 */
            fee: number;
            data: components["schemas"]["RuneResponseData"];
            omnity: components["schemas"]["OmnityResponseEntity"];
            bestinslot: components["schemas"]["BisRuneEntity"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    TokensController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: null | "marketcap:asc" | "marketcap:desc" | "price:asc" | "price:desc" | "holder_count:asc" | "holder_count:desc" | "created_time:asc" | "created_time:desc" | "name:asc" | "name:desc" | "last_comment_time:asc" | "last_comment_time:desc" | "comment_count:asc" | "comment_count:desc" | "volume:asc" | "volume:desc" | "sold:asc" | "sold:desc" | "txn_count:asc" | "txn_count:desc" | "btc_liquidity:asc" | "btc_liquidity:desc" | "swap_fees:asc" | "swap_fees:desc" | "swap_fees_24:asc" | "swap_fees_24:desc" | "swap_volume:asc" | "swap_volume:desc" | "swap_volume_24:asc" | "swap_volume_24:desc" | "last_action_time:asc" | "last_action_time:desc" | "price_delta_5m:asc" | "price_delta_5m:desc" | "price_delta_1h:asc" | "price_delta_1h:desc" | "price_delta_6h:asc" | "price_delta_6h:desc" | "price_delta_1d:asc" | "price_delta_1d:desc" | "ascension:asc" | "ascension:desc";
                /** @description Filter by bonded status */
                bonded?: boolean;
                /** @description Filter by featured status */
                featured?: boolean;
                /** @description Filter by etched status */
                etched?: boolean;
                /** @description Maximum price */
                price_max?: number;
                /** @description Minimum price */
                price_min?: number;
                /** @description Maximum volume */
                volume_max?: number;
                /** @description Minimum volume */
                volume_min?: number;
                /** @description Maximum number of holders */
                holders_max?: number;
                /** @description Minimum number of holders */
                holders_min?: number;
                /** @description Maximum comment count */
                comment_count_max?: number;
                /** @description Minimum comment count */
                comment_count_min?: number;
                /** @description Maximum sold count */
                sold_max?: number;
                /** @description Minimum sold count */
                sold_min?: number;
                /** @description Maximum market cap */
                marketcap_max?: number;
                /** @description Minimum market cap */
                marketcap_min?: number;
                buy_count_max?: number;
                buy_count_min?: number;
                sell_count_max?: number;
                sell_count_min?: number;
                tx_count_min?: number;
                tx_count_max?: number;
                has_twitter?: boolean;
                has_telegram?: boolean;
                has_website?: boolean;
                /** @description Does text search for fields: id, name, description, rune, creator, telegram, website, twitter, ticker */
                search?: string;
                /** @description Filter by IDs */
                id_in?: unknown[];
                /** @description Filter by IDs */
                id_not_in?: unknown[];
                creator?: string;
                favorite?: string;
                twitter_verified?: boolean;
                /** @description Include tokens with these tags (comma-separated) */
                include_tags?: string;
                /** @description Exclude tokens with these tags (comma-separated) */
                exclude_tags?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TokenEntity"][];
                    };
                };
            };
        };
    };
    TokenController_findOne: {
        parameters: {
            query: {
                show_hidden: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenEntity"];
                };
            };
        };
    };
    TokenController_getComments: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                user?: string;
                sort?: string[];
                pinned?: boolean;
                /** @description Filter for community comments (0 for regular, 1 for community) */
                community?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["CommentEntity"][];
                    };
                };
            };
        };
    };
    TokenController_getCommunityComments: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                user?: string;
                sort?: string[];
                pinned?: boolean;
                /** @description Filter for community comments (0 for regular, 1 for community) */
                community?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["CommentEntity"][];
                    };
                };
            };
        };
    };
    TokenController_postComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTokenCommentBodyDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentEntity"];
                };
            };
        };
    };
    TokenController_getOwners: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: null | "balance:asc" | "balance:desc" | "holding_value:asc" | "holding_value:desc" | "btc_first:asc" | "btc_first:desc";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["LedgerEntity"][];
                    };
                };
            };
        };
    };
    TokenController_getLiquidity: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: null | "balance:asc" | "balance:desc" | "holding_value:asc" | "holding_value:desc" | "btc_first:asc" | "btc_first:desc";
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["LedgerEntity"][];
                    };
                };
            };
        };
    };
    TokenController_getTrades: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                token?: string;
                time_min?: string;
                time_max?: string;
                user?: string;
                amount_btc_min?: number;
                amount_btc_max?: number;
                amount_token_min?: number;
                amount_token_max?: number;
                price_max?: number;
                price_min?: number;
                bonded?: boolean;
                sort?: null | "id:asc" | "id:desc" | "amount_token:asc" | "amount_token:desc" | "amount_btc:asc" | "amount_btc:desc" | "time:asc" | "time:desc" | "price:asc" | "price:desc";
                search?: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TradeEntity"][];
                    };
                };
            };
        };
    };
    TokenController_getFeed: {
        parameters: {
            query?: {
                /** @description The resolution of the feed in seconds ( defaults to 1 day ) */
                resolution?: number;
                /** @description UNIX date_from */
                from?: number;
                /** @description UNIX date_to */
                to?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenFeedEntity"][];
                };
            };
        };
    };
    TokenController_getTradingViewFeed: {
        parameters: {
            query?: {
                /** @description The resolution of the feed in minutes ( defaults to 1 hour ) */
                resolution?: number;
                /** @description JS Date String ( ISO String or UNIX time ) */
                from?: string;
                /** @description JS Date String ( ISO String or UNIX time ) */
                to?: string;
                /** @description order by time of the bars ( defaults to asc for TradingView ) */
                order?: string;
                last?: number;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenFeedEntity"][];
                };
            };
        };
    };
    TokenController_getImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": string;
                };
            };
        };
    };
    TokenController_addToFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenFavoriteEntity"];
                };
            };
        };
    };
    TokenController_removeFromFavorites: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenFavoriteEntity"];
                };
            };
        };
    };
    TokenController_verifyTwitterHandle: {
        parameters: {
            query: {
                code: string;
                redirect_uri: string;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            token?: components["schemas"]["TokenEntity"];
                            other_tokens?: components["schemas"]["TokenEntity"][];
                        };
                    };
                };
            };
        };
    };
    TokenController_pinComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                comment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CommentEntity"];
                    };
                };
            };
        };
    };
    TokenController_unpinComment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                comment: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["CommentEntity"];
                    };
                };
            };
        };
    };
    TokenController_upvote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                tokenId: string;
                id: number;
                action: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentUpvoteEntityResponse"];
                };
            };
        };
    };
    TokenController_removeUpvote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommentUpvoteEntityResponse"];
                };
            };
        };
    };
    TagsController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all tags */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"][];
                    };
                };
            };
        };
    };
    TagsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTagDto"];
            };
        };
        responses: {
            /** @description The tag has been successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"];
                    };
                };
            };
            /** @description Tag with this name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"];
                    };
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tag has been successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"];
                    };
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete tag that is in use */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TagsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Tag ID */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTagDto"];
            };
        };
        responses: {
            /** @description The tag has been successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"];
                    };
                };
            };
            /** @description Tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tag with this name already exists */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TokenTagsController_getTokenTags: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Token ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns all tags for the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["TagEntity"][];
                    };
                };
            };
            /** @description Token not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TokenTagsController_addTagToToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Token ID */
                id: string;
                /** @description Tag ID */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tag has been successfully added to the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        message?: string;
                    };
                };
            };
            /** @description Token or tag not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Tag is already applied to this token */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TokenTagsController_removeTagFromToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Token ID */
                id: string;
                /** @description Tag ID */
                tagId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The tag has been successfully removed from the token */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        success?: boolean;
                        message?: string;
                    };
                };
            };
            /** @description Token or tag not found or tag is not applied to this token */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TradesController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                token?: string;
                time_min?: string;
                time_max?: string;
                user?: string;
                amount_btc_min?: number;
                amount_btc_max?: number;
                amount_token_min?: number;
                amount_token_max?: number;
                price_max?: number;
                price_min?: number;
                bonded?: boolean;
                sort?: null | "id:asc" | "id:desc" | "amount_token:asc" | "amount_token:desc" | "amount_btc:asc" | "amount_btc:desc" | "time:asc" | "time:desc" | "price:asc" | "price:desc";
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TradeEntity"][];
                    };
                };
            };
        };
    };
    TradeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BTCController_getBtcBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                address: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            balance?: number;
                        };
                    };
                };
            };
        };
    };
    UsersController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                username?: string;
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["UserEntity"][];
                    };
                };
            };
        };
    };
    UserController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_getOwned: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                /** @description Filter by bonded status */
                bonded?: boolean;
                /** @description Filter by featured status */
                featured?: boolean;
                /** @description Filter by etched status */
                etched?: boolean;
                /** @description Maximum price */
                price_max?: number;
                /** @description Minimum price */
                price_min?: number;
                /** @description Maximum volume */
                volume_max?: number;
                /** @description Minimum volume */
                volume_min?: number;
                /** @description Maximum number of holders */
                holders_max?: number;
                /** @description Minimum number of holders */
                holders_min?: number;
                /** @description Maximum comment count */
                comment_count_max?: number;
                /** @description Minimum comment count */
                comment_count_min?: number;
                /** @description Maximum sold count */
                sold_max?: number;
                /** @description Minimum sold count */
                sold_min?: number;
                /** @description Maximum market cap */
                marketcap_max?: number;
                /** @description Minimum market cap */
                marketcap_min?: number;
                buy_count_max?: number;
                buy_count_min?: number;
                sell_count_max?: number;
                sell_count_min?: number;
                tx_count_min?: number;
                tx_count_max?: number;
                has_twitter?: boolean;
                has_telegram?: boolean;
                has_website?: boolean;
                /** @description Does text search for fields: id, name, description, rune, creator, telegram, website, twitter, ticker */
                search?: string;
                /** @description Filter by IDs */
                id_in?: unknown[];
                /** @description Filter by IDs */
                id_not_in?: unknown[];
                creator?: string;
                favorite?: string;
                twitter_verified?: boolean;
                /** @description Include tokens with these tags (comma-separated) */
                include_tags?: string;
                /** @description Exclude tokens with these tags (comma-separated) */
                exclude_tags?: string;
                sort?: null | "marketcap:asc" | "marketcap:desc" | "price:asc" | "price:desc" | "holder_count:asc" | "holder_count:desc" | "created_time:asc" | "created_time:desc" | "name:asc" | "name:desc" | "last_comment_time:asc" | "last_comment_time:desc" | "comment_count:asc" | "comment_count:desc" | "volume:asc" | "volume:desc" | "sold:asc" | "sold:desc" | "txn_count:asc" | "txn_count:desc" | "btc_liquidity:asc" | "btc_liquidity:desc" | "swap_fees:asc" | "swap_fees:desc" | "swap_fees_24:asc" | "swap_fees_24:desc" | "swap_volume:asc" | "swap_volume:desc" | "swap_volume_24:asc" | "swap_volume_24:desc" | "last_action_time:asc" | "last_action_time:desc" | "price_delta_5m:asc" | "price_delta_5m:desc" | "price_delta_1h:asc" | "price_delta_1h:desc" | "price_delta_6h:asc" | "price_delta_6h:desc" | "price_delta_1d:asc" | "price_delta_1d:desc" | "ascension:asc" | "ascension:desc" | "balance:asc" | "balance:desc" | "holding_value:asc" | "holding_value:desc" | "btc_first:asc" | "btc_first:desc";
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TokenAndBalanceEntity"][];
                    };
                };
            };
            /** @description Get user tokens */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getOwnedLiquidity: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                /** @description Filter by bonded status */
                bonded?: boolean;
                /** @description Filter by featured status */
                featured?: boolean;
                /** @description Filter by etched status */
                etched?: boolean;
                /** @description Maximum price */
                price_max?: number;
                /** @description Minimum price */
                price_min?: number;
                /** @description Maximum volume */
                volume_max?: number;
                /** @description Minimum volume */
                volume_min?: number;
                /** @description Maximum number of holders */
                holders_max?: number;
                /** @description Minimum number of holders */
                holders_min?: number;
                /** @description Maximum comment count */
                comment_count_max?: number;
                /** @description Minimum comment count */
                comment_count_min?: number;
                /** @description Maximum sold count */
                sold_max?: number;
                /** @description Minimum sold count */
                sold_min?: number;
                /** @description Maximum market cap */
                marketcap_max?: number;
                /** @description Minimum market cap */
                marketcap_min?: number;
                buy_count_max?: number;
                buy_count_min?: number;
                sell_count_max?: number;
                sell_count_min?: number;
                tx_count_min?: number;
                tx_count_max?: number;
                has_twitter?: boolean;
                has_telegram?: boolean;
                has_website?: boolean;
                /** @description Does text search for fields: id, name, description, rune, creator, telegram, website, twitter, ticker */
                search?: string;
                /** @description Filter by IDs */
                id_in?: unknown[];
                /** @description Filter by IDs */
                id_not_in?: unknown[];
                creator?: string;
                favorite?: string;
                twitter_verified?: boolean;
                /** @description Include tokens with these tags (comma-separated) */
                include_tags?: string;
                /** @description Exclude tokens with these tags (comma-separated) */
                exclude_tags?: string;
                sort?: null | "marketcap:asc" | "marketcap:desc" | "price:asc" | "price:desc" | "holder_count:asc" | "holder_count:desc" | "created_time:asc" | "created_time:desc" | "name:asc" | "name:desc" | "last_comment_time:asc" | "last_comment_time:desc" | "comment_count:asc" | "comment_count:desc" | "volume:asc" | "volume:desc" | "sold:asc" | "sold:desc" | "txn_count:asc" | "txn_count:desc" | "btc_liquidity:asc" | "btc_liquidity:desc" | "swap_fees:asc" | "swap_fees:desc" | "swap_fees_24:asc" | "swap_fees_24:desc" | "swap_volume:asc" | "swap_volume:desc" | "swap_volume_24:asc" | "swap_volume_24:desc" | "last_action_time:asc" | "last_action_time:desc" | "price_delta_5m:asc" | "price_delta_5m:desc" | "price_delta_1h:asc" | "price_delta_1h:desc" | "price_delta_6h:asc" | "price_delta_6h:desc" | "price_delta_1d:asc" | "price_delta_1d:desc" | "ascension:asc" | "ascension:desc" | "balance:asc" | "balance:desc" | "holding_value:asc" | "holding_value:desc" | "btc_first:asc" | "btc_first:desc";
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TokenAndBalanceEntity"][];
                    };
                };
            };
        };
    };
    UserController_getTokens: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: null | "marketcap:asc" | "marketcap:desc" | "price:asc" | "price:desc" | "holder_count:asc" | "holder_count:desc" | "created_time:asc" | "created_time:desc" | "name:asc" | "name:desc" | "last_comment_time:asc" | "last_comment_time:desc" | "comment_count:asc" | "comment_count:desc" | "volume:asc" | "volume:desc" | "sold:asc" | "sold:desc" | "txn_count:asc" | "txn_count:desc" | "btc_liquidity:asc" | "btc_liquidity:desc" | "swap_fees:asc" | "swap_fees:desc" | "swap_fees_24:asc" | "swap_fees_24:desc" | "swap_volume:asc" | "swap_volume:desc" | "swap_volume_24:asc" | "swap_volume_24:desc" | "last_action_time:asc" | "last_action_time:desc" | "price_delta_5m:asc" | "price_delta_5m:desc" | "price_delta_1h:asc" | "price_delta_1h:desc" | "price_delta_6h:asc" | "price_delta_6h:desc" | "price_delta_1d:asc" | "price_delta_1d:desc" | "ascension:asc" | "ascension:desc";
                /** @description Filter by bonded status */
                bonded?: boolean;
                /** @description Filter by featured status */
                featured?: boolean;
                /** @description Filter by etched status */
                etched?: boolean;
                /** @description Maximum price */
                price_max?: number;
                /** @description Minimum price */
                price_min?: number;
                /** @description Maximum volume */
                volume_max?: number;
                /** @description Minimum volume */
                volume_min?: number;
                /** @description Maximum number of holders */
                holders_max?: number;
                /** @description Minimum number of holders */
                holders_min?: number;
                /** @description Maximum comment count */
                comment_count_max?: number;
                /** @description Minimum comment count */
                comment_count_min?: number;
                /** @description Maximum sold count */
                sold_max?: number;
                /** @description Minimum sold count */
                sold_min?: number;
                /** @description Maximum market cap */
                marketcap_max?: number;
                /** @description Minimum market cap */
                marketcap_min?: number;
                buy_count_max?: number;
                buy_count_min?: number;
                sell_count_max?: number;
                sell_count_min?: number;
                tx_count_min?: number;
                tx_count_max?: number;
                has_twitter?: boolean;
                has_telegram?: boolean;
                has_website?: boolean;
                /** @description Does text search for fields: id, name, description, rune, creator, telegram, website, twitter, ticker */
                search?: string;
                /** @description Filter by IDs */
                id_in?: unknown[];
                /** @description Filter by IDs */
                id_not_in?: unknown[];
                creator?: string;
                favorite?: string;
                twitter_verified?: boolean;
                /** @description Include tokens with these tags (comma-separated) */
                include_tags?: string;
                /** @description Exclude tokens with these tags (comma-separated) */
                exclude_tags?: string;
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TokenEntity"][];
                    };
                };
            };
            /** @description Get user created tokens */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_getBalances: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                sort?: null | "balance:asc" | "balance:desc" | "holding_value:asc" | "holding_value:desc" | "btc_first:asc" | "btc_first:desc";
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["UserBalanceEntity"][];
                    };
                };
            };
        };
    };
    UserController_upsertProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UpsertProfileDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_updateUsername: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUsernameDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_upsertImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadProfileImageDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEntity"];
                };
            };
        };
    };
    UserController_getUtxo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                btcaddress: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NowNodesUtxoEntity"][];
                };
            };
        };
    };
    UserController_hiroGet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedHiroRune"] & {
                        data?: components["schemas"]["HiroRuneEntity"][];
                    };
                };
            };
        };
    };
    UserController_getImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": string;
                };
            };
        };
    };
    UserController_deposit: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            txid?: string;
                            amount?: number;
                            status?: string;
                        }[];
                    };
                };
            };
        };
    };
    UserController_withdraw: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: string[];
                    };
                };
            };
        };
    };
    UserController_activity: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                user?: string;
                token?: string;
                action?: "buy" | "sell" | "add" | "remove" | "withdraw" | "deposit" | "transfer" | "create" | "send" | "receive";
                action_in?: ("buy" | "sell" | "add" | "remove" | "withdraw" | "deposit" | "transfer" | "create" | "send" | "receive")[];
                time_min?: string;
                time_max?: string;
                amount_btc_max?: string;
                amount_btc_min?: string;
                amount_token_max?: string;
                amount_token_min?: string;
                sort?: null | "time:asc" | "time:desc" | "amount_btc:asc" | "amount_btc:desc" | "amount_token:asc" | "amount_token:desc";
                search?: string;
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["UserActivityEntity"][];
                    };
                };
            };
        };
    };
    UserController_getAchievements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserAchievementResponse"][];
                    };
                };
            };
        };
    };
    UserController_claimAchievements: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                achievementId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UserController_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            total_asset_value?: number;
                            total_liquidity?: number;
                            btc?: number;
                        };
                    };
                };
            };
        };
    };
    UserController_getTokenFavorites: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TokenFavoriteEntity"][];
                    };
                };
            };
        };
    };
    UserController_getReferralEarnings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            user?: string;
                            earnings?: number;
                            trades?: number;
                            users?: number;
                            volume?: number;
                        };
                    };
                };
            };
        };
    };
    UserController_getReferralEarningsHistory: {
        parameters: {
            query: {
                page?: number;
                limit?: number;
                user: string;
                sort?: components["schemas"]["Object"];
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["ReferralEarningEntity"][];
                    };
                };
            };
        };
    };
    UserController_getUserRealizedPnl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Realized PnL */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserRealizedPnlEntity"];
                    };
                };
            };
        };
    };
    UserController_getUserUnrealizedPnl: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                principal: string;
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Realized PnL */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserUnrealizedPnlEntity"];
                    };
                };
            };
        };
    };
    UserController_getUserTransactions: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                token?: string;
                search?: string;
                sort?: null | "index_time:asc" | "index_time:desc";
            };
            header?: never;
            path: {
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["TransactionAndTokenEntity"][];
                    };
                };
            };
        };
    };
    SettingsController_getSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SettingEntity"];
                };
            };
        };
    };
    TransactionsController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                user?: string;
                token?: string;
                search?: string;
                sort?: null | "index_time:asc" | "index_time:desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    TransactionController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BalanceController_getPrincipalTokenBalance: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
                principal: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Balance will be a number if it exists, otherwise null */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            balance?: number;
                        };
                    };
                };
            };
        };
    };
    AuthController_checkAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns the principal of the authenticated user */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    AuthController_authenticate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AuthenticateDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthJwtResponse"];
                };
            };
        };
    };
    AuthController_refreshAuth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthJwtResponse"];
                };
            };
        };
    };
    UploadController_getFile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                filename: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": string;
                };
            };
        };
    };
    UploadController_upload: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: {
                            upload?: string;
                        };
                    };
                };
            };
        };
    };
    CurrencyController_getCurrency: {
        parameters: {
            query?: {
                /** @description Gets currency that is less than or equal to this datetime */
                datetime?: string;
            };
            header?: never;
            path: {
                symbol: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencyEntity"];
                };
            };
        };
    };
    BlifeController_sync: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @example BLIFE account has not minted an ID */
                        message?: string;
                    };
                };
            };
            /** @description Response if BTC Wallet syncs with BLIFE */
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        sucess?: boolean;
                    };
                };
            };
        };
    };
    StripeController_createSession: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StripeCreateSessionResponse"];
                };
            };
        };
    };
    SnapshotController_createTokenShareSnapshot: {
        parameters: {
            query: {
                show_balance: boolean;
            };
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTokenShareSnapshotDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnapshotEntity"];
                };
            };
        };
    };
    SnapshotController_createTokenPnlSnapshot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Format of the Snapshot */
                format: "percent" | "amount";
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnapshotEntity"];
                };
            };
        };
    };
    SnapshotController_saveSnapshot: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SnapshotEntity"];
                };
            };
        };
    };
    SnapshotController_getImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/*": string;
                };
            };
        };
    };
    ActivityController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ActivitiesController_findAll: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                user?: string;
                token?: string;
                action?: "buy" | "sell" | "add" | "remove" | "withdraw" | "deposit" | "transfer" | "create" | "send" | "receive";
                action_in?: ("buy" | "sell" | "add" | "remove" | "withdraw" | "deposit" | "transfer" | "create" | "send" | "receive")[];
                time_min?: string;
                time_max?: string;
                amount_btc_max?: string;
                amount_btc_min?: string;
                amount_token_max?: string;
                amount_token_min?: string;
                sort?: null | "time:asc" | "time:desc" | "amount_btc:asc" | "amount_btc:desc" | "amount_token:asc" | "amount_token:desc";
                search?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Paginated"] & {
                        data?: components["schemas"]["UserActivityEntity"][];
                    };
                };
            };
        };
    };
    SearchController_findAll: {
        parameters: {
            query: {
                q: string;
                /** @description Possible values: trade, activity, user, token */
                types?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SearchEntity"][];
                    };
                };
            };
        };
    };
    StatisticsController_getDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RunesController_getByRuneName: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rune_name: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RuneResponseEntity"];
                };
            };
        };
    };
}
